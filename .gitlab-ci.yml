image: registry.gitlab.com/nikolayradoev/docker-images/chrome-mongo-node:20233

cache:
    key: "${CI_COMMIT_REF_SLUG}-client_lourd"
    paths:
        - client_lourd/node_modules/
        - server/node_modules/
    policy: pull

.only-client_lourd: &only-client_lourd
    only:
        refs:
            - master
            - merge_requests
        changes:
            - client_lourd/**/*
            - common/**/*
    cache:
        key: "${CI_COMMIT_REF_SLUG}-client_lourd"
        paths:
            - client_lourd/node_modules/
        policy: pull

.only-server: &only-server
    only:
        refs:
            - master
            - merge_requests
        changes:
            - server/**/*
            - common/**/*
    cache:
        key: "${CI_COMMIT_REF_SLUG}-server"
        paths:
            - server/node_modules/
        policy: pull

stages:
    - install
    - lint
    - test
    - build
    - deploy

install:client_lourd:
    stage: install
    <<: *only-client_lourd
    script:
        - cd client_lourd
        - npm ci --cache .npm --prefer-offline
    cache:
        key: "${CI_COMMIT_REF_SLUG}-client_lourd"
        paths:
            - client_lourd/node_modules/
            - client_lourd/.npm/
        policy: pull-push

install:server:
    stage: install
    <<: *only-server
    script:
        - cd server
        - npm ci --cache .npm --prefer-offline
    cache:
        key: "${CI_COMMIT_REF_SLUG}-server"
        paths:
            - server/node_modules/
            - server/.npm/
        policy: pull-push

lint:client_lourd:
    stage: lint
    needs: ["install:client_lourd"]
    allow_failure: true
    <<: *only-client_lourd
    script:
        - cd client_lourd
        - npm ci --cache .npm --prefer-offline
        - npm run lint

lint:server:
    stage: lint
    needs: ["install:server"]
    allow_failure: true
    <<: *only-server
    script:
        - cd server
        - npm ci --cache .npm --prefer-offline
        - npm run lint

test:client_lourd:
    stage: test
    needs: ["install:client_lourd"]
    <<: *only-client_lourd
    script:
        - Xvfb :99 -ac -screen 0 1920x1080x24 &
        - cd client_lourd
        - npm ci --cache .npm --prefer-offline
        - npm run coverage -- --browsers=ChromeHeadlessNoSandbox --watch=false
    dependencies:
        - install:client_lourd
    coverage: '/All files[^|]*\|[^|]*\s+([\d\.]+)/'
    artifacts:
        paths:
            - client_lourd/coverage/
        reports:
            coverage_report:
                coverage_format: cobertura
                path: client_lourd/coverage/client_lourd/cobertura-coverage.xml

test:server:
    stage: test
    needs: ["install:server"]
    <<: *only-server
    script:
        - cd server
        - npm ci --cache .npm --prefer-offline
        - npm run coverage
    dependencies:
        - install:server
    coverage: '/All files[^|]*\|[^|]*\s+([\d\.]+)/'
    artifacts:
        paths:
            - server/coverage/
        reports:
            coverage_report:
                coverage_format: cobertura
                path: server/coverage/cobertura-coverage.xml

build:server:
    stage: build
    rules:
        - if: "$CI_COMMIT_TAG =~ /deploy/"
    image: docker
    services:
        - name: docker:dind
          alias: docker
    variables:
        IMAGE_TAG_SPECIFIC: $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
        IMAGE_TAG_GLOBAL: $CI_REGISTRY_IMAGE:latest
        DOCKER_TLS_CERTDIR: "/certs"
    script:
        - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
        - docker pull $IMAGE_TAG_GLOBAL || true
        - docker build --cache-from $IMAGE_TAG_GLOBAL -t $IMAGE_TAG_SPECIFIC -t $IMAGE_TAG_GLOBAL .
        - docker push $IMAGE_TAG_SPECIFIC
        - docker push $IMAGE_TAG_GLOBAL

pages:
    stage: deploy
    rules:
        - if: "$CI_COMMIT_TAG =~ /deploy/"
          when: manual
    script:
        - cd client_lourd
        - npm ci --cache .npm --prefer-offline
        - npm run deploy
        - mkdir ../public
        - mv dist/client_lourd/* ../public/
    artifacts:
        paths:
            - public

variables:
    EC2_USER: ec2-user
    ORIGIN: "https://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}"

deploy:server:
    stage: deploy
    needs: ["build:server"]
    variables:
        IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
        DOMAIN_NAME: $DOMAIN_NAME
    rules:
        - if: "$CI_COMMIT_TAG =~ /deploy/"
          when: manual
    trigger:
        project: polytechnique-montr-al/log3900/24-1/equipe-103/spot-sev-deploy
