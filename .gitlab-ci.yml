image: registry.gitlab.com/nikolayradoev/docker-images/chrome-mongo-node:20231

cache:
    key: '${CI_COMMIT_REF_SLUG}-client'
    paths:
        - client/node_modules/
        - server/node_modules/
    policy: pull

.only-client: &only-client
    only:
        refs:
            - master
            - merge_requests
        changes:
            - client/**/*
            - common/**/*
    cache:
        key: '${CI_COMMIT_REF_SLUG}-client'
        paths:
            - client/node_modules/
        policy: pull

.only-server: &only-server
    only:
        refs:
            - master
            - merge_requests
        changes:
            - server/**/*
            - common/**/*
    cache:
        key: '${CI_COMMIT_REF_SLUG}-server'
        paths:
            - server/node_modules/
        policy: pull

stages:
    - install
    - lint
    - test
    - build
    - deploy

install:client:
    stage: install
    <<: *only-client
    script:
        - cd client
        - npm ci --cache .npm --prefer-offline
    cache:
        key: '${CI_COMMIT_REF_SLUG}-client'
        paths:
            - client/node_modules/
            - client/.npm/
        policy: pull-push

install:server:
    stage: install
    <<: *only-server
    script:
        - cd server
        - npm ci --cache .npm --prefer-offline
    cache:
        key: '${CI_COMMIT_REF_SLUG}-server'
        paths:
            - server/node_modules/
            - server/.npm/
        policy: pull-push

lint:client:
    stage: lint
    needs: ['install:client']
    allow_failure: true
    <<: *only-client
    script:
        - cd client
        - npm ci --cache .npm --prefer-offline
        - npm run lint

lint:server:
    stage: lint
    needs: ['install:server']
    allow_failure: true
    <<: *only-server
    script:
        - cd server
        - npm ci --cache .npm --prefer-offline
        - npm run lint

test:client:
    stage: test
    needs: ['install:client']
    <<: *only-client
    script:
        - Xvfb :99 -ac -screen 0 1920x1080x24 &
        - cd client
        - npm ci --cache .npm --prefer-offline
        - npm run coverage -- --browsers=ChromeHeadlessNoSandbox --watch=false
    dependencies:
        - install:client
    coverage: '/All files[^|]*\|[^|]*\s+([\d\.]+)/'
    artifacts:
        paths:
            - client/coverage/
        reports:
            coverage_report:
                coverage_format: cobertura
                path: client/coverage/client/cobertura-coverage.xml

test:server:
    stage: test
    needs: ['install:server']
    <<: *only-server
    script:
        - cd server
        - npm ci --cache .npm --prefer-offline
        - npm run coverage
    dependencies:
        - install:server
    coverage: '/All files[^|]*\|[^|]*\s+([\d\.]+)/'
    artifacts:
        paths:
            - server/coverage/
        reports:
            coverage_report:
                coverage_format: cobertura
                path: server/coverage/cobertura-coverage.xml

build:server:
    stage: build
    rules:
        - if: '$CI_COMMIT_TAG =~ /deploy/'
    image: docker
    services:
        - name: docker:dind
          alias: docker
    variables:
        IMAGE_TAG_SPECIFIC: $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
        IMAGE_TAG_GLOBAL: $CI_REGISTRY_IMAGE:latest
        DOCKER_TLS_CERTDIR: "/certs"
    script:
        - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
        - docker pull $IMAGE_TAG_GLOBAL || true
        - docker build --cache-from $IMAGE_TAG_GLOBAL -t $IMAGE_TAG_SPECIFIC -t $IMAGE_TAG_GLOBAL .
        - docker push $IMAGE_TAG_SPECIFIC
        - docker push $IMAGE_TAG_GLOBAL

pages:
    stage: deploy
    rules:
        - if: '$CI_COMMIT_TAG =~ /deploy/'
          when: manual
    script:
        - cd client
        - npm ci --cache .npm --prefer-offline
        - npm run deploy
        - mkdir ../public
        - mv dist/client/* ../public/
    artifacts:
        paths:
            - public

variables:
    EC2_USER: ec2-user
    ORIGIN: 'https://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}'

deploy:server:
    image: debian
    stage: deploy
    needs: ['build:server']
    variables:
        IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
    rules:
        - if: '$CI_COMMIT_TAG =~ /deploy/'
          when: manual
    script:
        - 'which ssh-agent || (apt-get update -qq && apt-get install -qq openssh-client )'
        - eval $(ssh-agent -s)
        - ssh-add <(echo "$EC2_PEM_FILE_CONTENT")
        - mkdir -p ~/.ssh
        - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
        - 'scp ./docker-compose.yml "${EC2_USER}@${EC2_HOST}:"'
        - |
            timeout 600 ssh -t -o ServerAliveInterval=15 -o ServerAliveCountMax=5 "${EC2_USER}@${EC2_HOST}" "
                set -e

                echo 'Update repository cache'
                sudo yum update -y

                echo 'Setting up swap memory'
                if test -f '/swapfile'
                then
                    echo 'swap memory is already configured, skipping...'
                else
                    sudo dd if=/dev/zero of=/swapfile bs=128M count=16
                    sudo chmod 600 /swapfile
                    sudo mkswap -f /swapfile
                    sudo swapon /swapfile
                    echo '/swapfile swap swap defaults 0 0' | sudo tee -a /etc/fstab
                fi

                echo 'Setting up git'
                if which git &> /dev/null
                then
                    echo 'git is already installed, skipping...'
                else
                    sudo yum install -y git
                fi

                echo 'Setting up docker'
                if which docker &> /dev/null
                then
                    echo 'docker is already installed, skipping...'
                else
                    sudo amazon-linux-extras enable docker
                    sudo yum -y install docker
                    sudo systemctl enable --now docker.service
                    sudo usermod -aG docker ${EC2_USER}
                fi

                echo 'Setting up docker-compose'
                if test -f ~/.docker/cli-plugins/docker-compose
                then
                    echo 'docker-compose is already installed, skipping...'
                else
                    mkdir -p ~/.docker/cli-plugins
                    curl -SL https://github.com/docker/compose/releases/latest/download/docker-compose-linux-x86_64 -o ~/.docker/cli-plugins/docker-compose
                    chmod +x ~/.docker/cli-plugins/docker-compose
                fi

                # Setup docker repo
                mkdir docker || echo Repo already there
                mv docker-compose.yml docker/
                cd docker
                echo -e 'IMAGE_TAG=${IMAGE_TAG}\nDOMAIN_NAME=${DOMAIN_NAME}\nDATABASE_CONNECTION_STRING=${DATABASE_CONNECTION_STRING}\n' > .env
                touch acme.json && chmod 600 acme.json
                sg docker -c 'docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY'
                sg docker -c 'docker compose pull'
                sg docker -c 'docker compose up -d'
            "
